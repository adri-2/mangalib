<template>
  <div class="bg-gray-200">
    <h1 class="text-center text-6xl py-7">
      La <span class="font-bold">Bibliothéque Mangalib</span>
    </h1>
    <input type="text" v-model="searchquery" />
    <Popup><LivreForm @vue:updated="fetchLivres" /></Popup>
    <div
      class="max-w-2xl mx-auto px-4 py-6 lg:max-w-6xl grid grid-cols-1 gap-y-10 gap-x-8 sm:grid-cols-2 lg:grid-cols-4 xl-grid-cols-4"
    >
      <div
        class="bg-white shodow-lg rounded-lg"
        v-for="livre in livreFilter"
        :key="livre"
      >
        <img
          src="../../public/photo_2024-12-15_15-19-55.jpg"
          alt=" "
          class="rounded-t-lg"
        />
        <div class="p-4">
          <div class="flex mb-5">
            <h3 class="text-2xl text-gray-700">
              <Span> {{ livre.titre }}</Span>
            </h3>

            <!-- <span aria-hidden="true" class="absolute inset-0" /> -->

            <p class="mt-1 ml-auto text-lg font-mediu text-gray-900">
              {{ livre.quantity }}
            </p>
          </div>
          <RouterLink
            :to="`/livre/${livre.id}`"
            class="text-gray-100 text-lg font-center justify-between px-5 py-1 shadow-sm font-medium rounded-md bg-red-600"
          >
            <span class="text-gray-100 text-lg">View</span>
            <!-- <img src="" alt="" class="ml-4 h-6 w-6" /> -->
          </RouterLink>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted, computed } from "vue";
import axios from "axios";
import LivreForm from "./LivreForm.vue";
import Popup from "../components/Popup.vue";
const apiUrl = import.meta.env.VITE_API_URL;
// Déclarer une variable réactive pour stocker les livres
const livres = ref([]);
const etat = ref(false);

// Fonction pour récupérer les livres
const fetchLivres = () => {
  // console.log("fetchLivres appelé");
  axios
    .get(`${apiUrl}/livre/`)
    .then((response) => {
      livres.value = response.data;
      // console.log("Données récupérées :", response.data);
    })
    .catch((error) => {
      console.error("Erreur lors de la récupération des livres:", error);
    });
};
const searchquery = ref("");
const livreFilter = computed(() => {
  return livres.value.filter((item) =>
    item.titre.toLowerCase().includes(searchquery.value.toLowerCase())
  );
});

onMounted(fetchLivres);
</script>
